name App::IBIS

# css /asset/sass.css

<Plugin::Static::Simple>
    dirs static
    dirs asset
#    ignore_extensions derp

</Plugin::Static::Simple>

<Model::RDF>
  graph urn:x-ibis:default
  <namespaces>
    rdf   http://www.w3.org/1999/02/22-rdf-syntax-ns\#
    rdfs  http://www.w3.org/2000/01/rdf-schema\#
    owl   http://www.w3.org/2002/07/owl\#
    xsd   http://www.w3.org/2001/XMLSchema\#
    xhv   http://www.w3.org/1999/xhtml/vocab\#
    #rdfa  http://www.w3.org/ns/rdfa\#
    http  http://www.w3.org/2011/http\#
    vann  http://purl.org/vocab/vann/
    dc    http://purl.org/dc/elements/1.1/
    dct   http://purl.org/dc/terms/
    sioc  http://rdfs.org/sioc/ns\#
    sioct http://rdfs.org/sioc/types\#
    foaf  http://xmlns.com/foaf/0.1/
    org   http://www.w3.org/ns/org\#
    rel   http://purl.org/vocab/relationship/
    bibo  http://purl.org/ontology/bibo/
    skos  http://www.w3.org/2004/02/skos/core\#
    gr    http://purl.org/goodrelations/v1\#
    qb    http://purl.org/linked-data/cube\#
    ci    https://privatealpha.com/ontology/content-inventory/1\#
    ibis  https://privatealpha.com/ontology/ibis/1\#
    vs    http://www.w3.org/2003/06/sw-vocab-status/ns\#
    tool  http://www.daml.org/tools/tools-ont\#
  </namespaces>

  # redland leaks like a sieve (literally >1mb per request) but it's a
  # damn sight faster than dbi
  # <store>
  #   storetype  Redland
  #   store_name hashes
  #   name       ibis
  #   <options>
  #     hash-type        bdb
  #     dir              /var/lib/app-ibis
  #     index-predicates 1
  #     contexts         1
  #     new              0
  #     write            1
  #   </options>
  # </store>

  # <store>
  #   storetype SPARQL
  #   url http://deuce:8890/sparql
  # </store>

  # this shit is garbage do not use it
  # actually not so bad when you cache it :P
  <store>
    storetype DBI
    name      ibis
    dsn       dbi:Pg:dbname=trine
  </store>
</Model::RDF>

<palette>
  # The goal is to generate a bunch of colours that can be related
  # both to RDF classes/properties, and to one another in some
  # mathematical way. The plan is to punt out a SASS
  # (http://sass-lang.org/) resource which can be subsequently
  # processed into standard CSS.

  # Colour palette operations are done in HSLuv space
  # (http://www.hsluv.org/).

  # RDF resources (classes and properties) set the initial values.
  # These can be CSS hex triplets or inputs to Convert::Color. Default
  # colours specify text for HTML ('color:') and fill for SVG. Other
  # colours which can be specified include:

  # * background
  # * hairlines (border, outline, text-decoration, SVG stroke)
  # * blurs and shadows (box-shadow, text-shadow)
  # * etc (these can just be any old identifier)

  # Variants differentiate the initial RDF resources. They represent
  # different features of a page (entire body, main content, nav,
  # asides, etc). They should be variables which can be used to
  # construct any selector (element, pseudoelement, attribute, class,
  # id, any combination thereof EXCEPT STATES).

  # States (:hover :active blah blah) operate on top of variants.
  # Since there is a defined set of these, we can reuse their
  # identifiers.

  # General principle is to keep symbols to a minimum. In particular I
  # don't want to generate redundant identifiers for RDF URIs/CURIEs.

  # This will probably mean that the resource just barfs out a long
  # list of instance data which "pulls" the SASS directives through it
  # to produce its output.

  # We want the freedom to sculpt the CSS (SASS) by hand but drop in
  # the instance data where needed:

  # * attribute selectors (about typeof rel rev property datatype)
  # * appropriate distinctions: (classes will never be in rel/rev/property;
  #   properties will never be in typeof/datatype)
  # * all permutations thereof (IRI/URI, CURIE, SafeCURIE, vocab+term(?))

  <class>
    ibis:Issue    \#c99
    ibis:Position \#9c9
    ibis:Argument \#99c
    skos:Concept  \#c9c
  </class>
  <property>
    ibis:generalizes   \#5f7fff
    ibis:specializes   \#0033ff
    ibis:suggests      \#ffcd40
    ibis:suggested-by  \#ffbc00
    ibis:questions     \#ff9a40
    ibis:questioned-by \#ff7800
    ibis:response      \#8a0041
    ibis:responds-to   \#d50065
    ibis:supports      \#4dde00
    ibis:supported-by  \#55a62a
    ibis:opposes       \#ec0033
    ibis:opposed-by    \#b12c49
    # skos:broader
    # skos:broaderTransitive
    # skos:broadMatch
    # skos:narrower
    # skos:narrowerTransitive
    # skos:narrowMatch
    # skos:related
    # skos:closeMatch
    # skos:exactMatch
  </property>
  <variant>
    # variants 
    <background>
    # this should be a straight transform from baseline down
    L   10 # absolute luminosity
    TCR 4  # plain text contrast ratio
    LCR 7  # link text contrast ratio
    </background>
    <subject>
    # what i really need are asymptotes
    LD  90  # luminosity delta
    TCR 7
    </subject>
    <predicate>
    s -0.3
    v 0.3
    </predicate>
    <neighbour>
    s -0.2
    v 0.1
    </neighbour>
    
    <canvas>
    L  10
    TL 50
    </canvas>
    <selected>
    </selected>
    <neighbour>
    </neighbour>
  </variant>
  <state>
    # state is like, hover, active, focus, whatever
    <hover>
    </hover>
    <active>
    </active>
  </state>
</palette>
